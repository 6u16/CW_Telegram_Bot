import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

# DB import
from apps.m_DB_manipulation import add_new_word, del_word_for_user, select_for_user, select_len_wordlist


print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = ''  # –í–∞—à —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º
bot = TeleBot(token_bot, state_storage=state_storage)


known_users = []
userStep = {}
buttons = []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—á—ë—Ç–∞ –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –∏–∑ 4—Ö —Å–ª–æ–≤, –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é i_iter = 4 –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç —Å–ª–æ–≤
# –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–ª 4 —Å–ª–æ–≤–∞(–ø–æ –∑–∞–¥–∞–Ω–∏—é 4 –∫–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞)
i_iter = 0  # –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ –ø–∞–∫–µ—Ç—É —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
l_frm_sct = []  # –ü–∞–∫–µ—Ç —Å–ª–æ–≤ –∏–∑ –ë–î

# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –¥–æ–±–≤–∞–ª–µ–Ω–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
s_en_word = ''
s_ru_word = ''

def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    
    cid = message.chat.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, "Hello, stranger, let study English...")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global i_iter  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å—ë—Ç–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_cards()
    global l_frm_sct  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î –ø–∞–∫–µ—Ç–∞ —Å–ª–æ–≤ l_frm_sct –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏ create_cards()
                      # –í –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω—É–ª—è—é—Ç—Å—è.
    global buttons
    buttons = []
    
    # –ó–∞–ø—Ä–æ—Å –ø–∞–∫–µ—Ç–∞ —Å–ª–æ–≤ –∏–∑ –ë–î –ø—Ä–∏ —Å—á—ë—Ç—á–∏–∫–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_cards() —Ä–∞–≤–Ω–æ–º i_iter = 0, —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–¥–∞—ë–º i_app_user_id –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if i_iter == 0: l_frm_sct = select_for_user(i_app_user_id=cid)  # –ó–∞–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞ —Å–ª–æ–≤, —Å—á—ë—Ç—á–∏–∫ i_iter++ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ NEXT(–ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_cards() = i_iter++)
    
    target_word = f'{l_frm_sct[i_iter][0]}'  # –ë–µ—Ä—ë–º –æ—á–µ—Ä–µ–¥–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø–∞–∫–µ—Ç–∞ –ø–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É i_iter
    translate = f'{l_frm_sct[i_iter][1]}'  # –ë–µ—Ä—ë–º –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø–∞–∫–µ—Ç–∞ –ø–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É i_iter
    target_word_btn = types.KeyboardButton(target_word)
    #buttons.append(target_word_btn)  # —É–±—Ä–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
    
    others = [f'{l_frm_sct[0][0]}', f'{l_frm_sct[1][0]}', f'{l_frm_sct[2][0]}', f'{l_frm_sct[3][0]}']  # –ü–∞–∫–µ—Ç –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤(–≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–∞)
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    
    # –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ –ø–∞–∫–µ—Ç—É —Å–ª–æ–≤
    i_iter += 1
    if i_iter > 3: i_iter = 0  # –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –ø–∞–∫–µ—Ç –∏–∑ 4—Ö —Å–ª–æ–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –ë–î –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Å–ª–æ–≤
    
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    #buttons.extend([next_btn, add_word_btn, delete_word_btn])  # —É–±—Ä–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


# –§—É–Ω—É—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ –ë–î
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    
    bot.send_message(cid, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î:')
    bot.register_next_step_handler(message, step_del_1)  # –ñ–¥—ë–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ step_del_1()
    
def step_del_1(message):
    cid = message.chat.id
    ru_word = message.text
    
    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ "from apps.m_DB_manipulation"
    if del_word_for_user(i_app_user_id = cid, eng_word=None, rus_word=ru_word) == True:
        bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ "{ru_word}" –∏ –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = {cid}, —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î')
        
        i_slw = select_len_wordlist(cid)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª.—Å–ª–æ–≤ –∏–∑—É—á–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        bot.send_message(message.chat.id, f'–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ = {i_slw}')
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –ë–î')
    

# –§—É–Ω—É—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ë–î
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    #print(message.text)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    
    bot.send_message(cid, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')
    bot.register_next_step_handler(message, step_add_1)  # –ñ–¥—ë–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ step_1()
    
def step_add_1(message):
    cid = message.chat.id
    global s_ru_word
    s_ru_word = message.text  # –ó–∞–ø–∏—Å—å –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_new_word()
    bot.send_message(message.chat.id, f'–†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: "{s_ru_word}"')
    
    bot.send_message(cid, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:')
    bot.register_next_step_handler(message, step_add_2)    # –ñ–¥—ë–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ step_2()
    
def step_add_2(message):
    cid = message.chat.id
    global s_en_word
    s_en_word = message.text  # –ó–∞–ø–∏—Å—å –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_new_word()
    bot.send_message(message.chat.id, f'–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: "{s_en_word}"')
    
    # –§—É–Ω—É—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ "from apps.m_DB_manipulation"
    add_new_word(eng_word=s_en_word, rus_word=s_ru_word, i_app_user_id=cid)  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, f'–û—Ç–Ω–æ—à–µ–Ω–∏–µ "{s_ru_word} = {s_en_word}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = {cid}, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –ë–î')
    
    i_slw = select_len_wordlist(cid)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª.—Å–ª–æ–≤ –∏–∑—É—á–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    bot.send_message(message.chat.id, f'–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ = {i_slw}')


# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∞—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è create_cards()
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)